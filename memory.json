{
    "AWSTemplateFormatVersion" : "2010-09-09",
  
    "Description" : "AWS CloudFormation Sample Template AutoScalingMultiAZWithNotifications: Create a multi-az, load balanced and auto-scaled sample web site running on an Apache Web Server. The application is configured to span all Availability Zones in the region and is auto-scaled based on the CPU utilization of the web servers. Notifications will be sent to the operator email address on scaling events. The instances are load balanced with a simple health check against the default web page. **WARNING** This template creates one or more Amazon EC2 instances and an Elastic Load Balancer. You will be billed for the AWS resources used if you create a stack from this template.",
  
    "Parameters" : {
      "InstanceType" : {
        "Description" : "WebServer EC2 instance type",
        "Type" : "String",
        "Default" : "t2.micro",
        "AllowedValues" : [ 
            "t2.micro"
        ],
        "ConstraintDescription" : "must be a valid EC2 instance type."
      },
  
      "KeyName" : {
        "Description" : "The EC2 Key Pair to allow SSH access to the instances",
        "Type" : "AWS::EC2::KeyPair::KeyName",
        "ConstraintDescription" : "must be the name of an existing EC2 KeyPair."
      },
  
      "SSHLocation" : {
        "Description" : "The IP address range that can be used to SSH to the EC2 instances",
        "Type": "String",
        "MinLength": "9",
        "MaxLength": "18",
        "Default": "0.0.0.0/0",
        "AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
        "ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
      },
      "Password": {
        "NoEcho": "true",
        "Type": "String",
        "Description" : "New account password",
        "MinLength": "1",
        "MaxLength": "41",
        "ConstraintDescription" : "the password must be between 1 and 41 characters"
      }
    },
    "Mappings" : {
        "Region2Examples" : {
            "us-east-1"      : { "Examples" : "https://s3.amazonaws.com/cloudformation-examples-us-east-1" }
          }
      ,
      "AWSInstanceType2Arch" : {
        "t2.micro"    : { "Arch" : "HVM64"  }
      },
  
      "AWSInstanceType2NATArch" : {
        "t2.micro"    : { "Arch" : "NATHVM64"  }
      }
  ,
      "AWSRegionArch2AMI" : {
        "us-east-1"        : {"HVM64" : "ami-0ff8a91507f77f867", "HVMG2" : "ami-0a584ac55a7631c0c"}
      }
  
    },
   
    "Resources" : {
  
      "WebServerGroup" : {
        "Type" : "AWS::AutoScaling::AutoScalingGroup",
        "Properties" : {
          "AvailabilityZones" : { "Fn::GetAZs" : ""},
          "LaunchConfigurationName" : { "Ref" : "LaunchConfig" },
          "MinSize" : "2",
          "MaxSize" : "4",
          "LoadBalancerNames" : [ { "Ref" : "ElasticLoadBalancer" } ]
        },
        "CreationPolicy" : {
          "ResourceSignal" : {
            "Timeout" : "PT15M",
            "Count"   : "1"
          }
        },
        "UpdatePolicy": {
          "AutoScalingRollingUpdate": {
            "MinInstancesInService": "1",
            "MaxBatchSize": "1",
            "PauseTime" : "PT15M",
            "WaitOnResourceSignals": "true"
          }
        }
      },
  
      "LaunchConfig" : {
        "Type" : "AWS::AutoScaling::LaunchConfiguration",
        "Metadata" : {
            "Comment" : "Install a simple application",
            "AWS::CloudFormation::Init" : {
              "config" : {
                "packages" : {
                  "yum" : {
                    "httpd" : []
                  }
                },
    
                "files" : {
                  "/var/www/html/index.html" : {
                    "content" : { "Fn::Join" : ["\n", [
                      "<img src=\"", {"Fn::FindInMap" : ["Region2Examples", {"Ref" : "AWS::Region"}, "Examples"]}, "/cloudformation_graphic.png\" alt=\"AWS CloudFormation Logo\"/>",
                      "<h1>Congratulations, you have successfully launched the AWS CloudFormation sample.</h1>"
                    ]]},
                    "mode"    : "000644",
                    "owner"   : "root",
                    "group"   : "root"
                  },
    
                  "/etc/cfn/cfn-hup.conf" : {
                    "content" : { "Fn::Join" : ["", [
                      "[main]\n",
                      "stack=", { "Ref" : "AWS::StackId" }, "\n",
                      "region=", { "Ref" : "AWS::Region" }, "\n"
                    ]]},
                    "mode"    : "000400",
                    "owner"   : "root",
                    "group"   : "root"
                  },
    
                  "/etc/cfn/hooks.d/cfn-auto-reloader.conf" : {
                    "content": { "Fn::Join" : ["", [
                      "[cfn-auto-reloader-hook]\n",
                      "triggers=post.update\n",
                      "path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
                      "action=/opt/aws/bin/cfn-init -v ",
                      "         --stack ", { "Ref" : "AWS::StackName" },
                      "         --resource LaunchConfig ",
                      "         --region ", { "Ref" : "AWS::Region" }, "\n",
                      "runas=root\n"
                    ]]}
                  }
                },
    
                "services" : {
                  "sysvinit" : {
                    "httpd"    : { "enabled" : "true", "ensureRunning" : "true" },
                    "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                  "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                  }
                }
              }
            }
          },
      
    
        "Properties" : {
          "KeyName" : { "Ref" : "KeyName" },
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                                            { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] },
          "SecurityGroups" : [ { "Ref" : "InstanceSecurityGroup" } ],
          "InstanceType" : { "Ref" : "InstanceType" },
          "UserData"       : { "Fn::Base64" : { "Fn::Join" : ["", [
               "#!/bin/bash -xe\n",
               "yum update -y aws-cfn-bootstrap\n",
  
               "/opt/aws/bin/cfn-init -v ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource LaunchConfig ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n",
  
               "/opt/aws/bin/cfn-signal -e $? ",
               "         --stack ", { "Ref" : "AWS::StackName" },
               "         --resource WebServerGroup ",
               "         --region ", { "Ref" : "AWS::Region" }, "\n"
          ]]}}
        }
      },
  
      "WebServerScaleUpPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "1"
        }
      },
      "WebServerScaleDownPolicy" : {
        "Type" : "AWS::AutoScaling::ScalingPolicy",
        "Properties" : {
          "AdjustmentType" : "ChangeInCapacity",
          "AutoScalingGroupName" : { "Ref" : "WebServerGroup" },
          "Cooldown" : "60",
          "ScalingAdjustment" : "-1"
        }
      },
  
      "CPUAlarmHigh": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-up if CPU > 90% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "2",
          "Threshold": "90",
          "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WebServerGroup" }
            }
          ],
          "ComparisonOperator": "GreaterThanThreshold"
        }
      },
      "CPUAlarmLow": {
       "Type": "AWS::CloudWatch::Alarm",
       "Properties": {
          "AlarmDescription": "Scale-down if CPU < 70% for 10 minutes",
          "MetricName": "CPUUtilization",
          "Namespace": "AWS/EC2",
          "Statistic": "Average",
          "Period": "300",
          "EvaluationPeriods": "2",
          "Threshold": "70",
          "AlarmActions": [ { "Ref": "WebServerScaleDownPolicy" } ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WebServerGroup" }
            }
          ],
          "ComparisonOperator": "LessThanThreshold"
        }
      },
        "HighMemoryUsage": {
            "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Memoryusageishigh",
                "AlarmName": "HighMemoryUsage",
                "ComparisonOperator": "GreaterThanThreshold",
                "EvaluationPeriods": "2",
                "MetricName": "MemoryUsage",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "90",
                "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
          "Dimensions": [
            {
              "Name": "AutoScalingGroupName",
              "Value": { "Ref": "WebServerGroup" }
            }
          ]
        }
    },
        "LowhMemoryUsage": {
         "Type": "AWS::CloudWatch::Alarm",
            "Properties": {
                "AlarmDescription": "Memoryusageislow",
                "AlarmName": "LowMemoryUsage",
                "ComparisonOperator": "LessThanThreshold",
                "EvaluationPeriods": "2",
                "MetricName": "MemoryUsage",
                "Namespace": "AWS/EC2",
                "Period": "300",
                "Statistic": "Average",
                "Threshold": "70",
                "AlarmActions": [ { "Ref": "WebServerScaleUpPolicy" } ],
        "Dimensions": [
            {
            "Name": "AutoScalingGroupName",
            "Value": { "Ref": "WebServerGroup" }
            }
        ]
        }
    },
  
      "ElasticLoadBalancer" : {
        "Type" : "AWS::ElasticLoadBalancing::LoadBalancer",
        "Properties" : {
          "AvailabilityZones" : { "Fn::GetAZs" : "" },
          "CrossZone" : "true",
          "Listeners" : [ {
            "LoadBalancerPort" : "80",
            "InstancePort" : "80",
            "Protocol" : "HTTP"
          } ],
          "HealthCheck" : {
            "Target" : "HTTP:80/",
            "HealthyThreshold" : "3",
            "UnhealthyThreshold" : "5",
            "Interval" : "30",
            "Timeout" : "5"
          }
        }
      },
  
      "InstanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable SSH access and HTTP from the load balancer only",
          "SecurityGroupIngress" : [ {
            "IpProtocol" : "tcp",
            "FromPort" : "22",
            "ToPort" : "22",
            "CidrIp" : { "Ref" : "SSHLocation"}
          },
          {
            "IpProtocol" : "tcp",
            "FromPort" : "80",
            "ToPort" : "80",
            "SourceSecurityGroupOwnerId" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.OwnerAlias"]},
            "SourceSecurityGroupName" : {"Fn::GetAtt" : ["ElasticLoadBalancer", "SourceSecurityGroup.GroupName"]}
          } ]
        }
      },
      "EC2Instance" : {
        "Type" : "AWS::EC2::Instance",
        "Properties" : {
          "UserData" : { "Fn::Base64" : { "Fn::Join" : [ "", [ "IPAddress=", {"Ref" : "IPAddress"}]]}},
          "InstanceType" : { "Ref" : "InstanceType" },
          "SecurityGroups" : [ { "Ref" : "MystanceSecurityGroup" } ],
          "KeyName" : { "Ref" : "KeyName" },
          "ImageId" : { "Fn::FindInMap" : [ "AWSRegionArch2AMI", { "Ref" : "AWS::Region" },
                            { "Fn::FindInMap" : [ "AWSInstanceType2Arch", { "Ref" : "InstanceType" }, "Arch" ] } ] }
        }
      },
  
      "MystanceSecurityGroup" : {
        "Type" : "AWS::EC2::SecurityGroup",
        "Properties" : {
          "GroupDescription" : "Enable SSH access",
          "SecurityGroupIngress" : 
            [ { "IpProtocol" : "tcp", "FromPort" : "22", "ToPort" : "22", "CidrIp" : { "Ref" : "SSHLocation"} }]
        }
      },
  
      "IPAddress" : {
        "Type" : "AWS::EC2::EIP"
      },
  
      "IPAssoc" : {
        "Type" : "AWS::EC2::EIPAssociation",
        "Properties" : {
          "InstanceId" : { "Ref" : "EC2Instance" },
          "EIP" : { "Ref" : "IPAddress" }
        }
      },
      "User" : {
        "Type" : "AWS::IAM::User",
        "Properties" : {
          "LoginProfile": {
            "Password": { "Ref" : "Password" }
          }
        }
      },
  
      "UserGroup" : {
        "Type" : "AWS::IAM::Group"
      },
  
      "AdminGroup" : {
        "Type" : "AWS::IAM::Group"
      },
  
      "Users" : {
        "Type" : "AWS::IAM::UserToGroupAddition",
        "Properties" : {
          "GroupName": { "Ref" : "UserGroup" },
          "Users" : [ { "Ref" : "User" } ]
        }
      },
  
      "Admins" : {
        "Type" : "AWS::IAM::UserToGroupAddition",
        "Properties" : {
          "GroupName": { "Ref" : "AdminGroup" },
          "Users" : [ { "Ref" : "User" } ]
        }
      },
  
      "UserPolicies" : {
        "Type" : "AWS::IAM::Policy",
        "Properties" : {
          "PolicyName" : "Users",
          "PolicyDocument" : {
            "Statement": [{
              "Effect"   : "Allow",
              "Action"   : [
                "cloudformation:Describe*",
                "cloudformation:List*",
                "cloudformation:Get*"
                ],
              "Resource" : "*"
            }]
          },
          "Groups" : [{ "Ref" : "UserGroup" }]
        }
      },
  
      "AdminPolicies" : {
        "Type" : "AWS::IAM::Policy",
        "Properties" : {
          "PolicyName" : "Admins",
          "PolicyDocument" : {
            "Statement": [{
              "Effect"   : "Allow",
              "Action"   : "cloudformation:*",
              "Resource" : "*"
            }]
          },
          "Groups" : [{ "Ref" : "AdminGroup" }]
        }
      },
  
      "Keys" : {
        "Type" : "AWS::IAM::AccessKey",
        "Properties" : {
          "UserName" : { "Ref": "User" }
        }
      },
      "S3Bucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
            "AccessControl": "PublicRead",
            "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "error.html"
            }
        },
        "DeletionPolicy": "Retain"
    },
    "BucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
            "PolicyDocument": {
                "Id": "MyPolicy",
                "Version": "2012-10-17",
                "Statement": [
                    {
                        "Sid": "PublicReadForGetBucketObjects",
                        "Effect": "Allow",
                        "Principal": "*",
                        "Action": "s3:GetObject",
                        "Resource": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:s3:::",
                                    {
                                        "Ref": "S3Bucket"
                                    },
                                    "/*"
                                ]
                            ]
                        }
                    }
                ]
            },
            "Bucket": {
                "Ref": "S3Bucket"
            }
        }
    }
    },
    "Outputs" : {
        "URL" : {
          "Description" : "The URL of the website",
          "Value" :  { "Fn::Join" : [ "", [ "http://", { "Fn::GetAtt" : [ "ElasticLoadBalancer", "DNSName" ]}]]}
        },
        "InstanceId" : {
            "Description" : "InstanceId of the newly created EC2 instance",
            "Value" : { "Ref" : "EC2Instance" }
          },
          "InstanceIPAddress" : {
            "Description" : "IP address of the newly created EC2 instance",
            "Value" : { "Ref" : "IPAddress" }
          },
          "AccessKey" : {
            "Value" : { "Ref" : "Keys" },
            "Description" : "AWSAccessKeyId of new user"
          },
          "SecretKey" : {
            "Value" : { "Fn::GetAtt" : ["Keys", "SecretAccessKey"]},
            "Description" : "AWSSecretKey of new user"
          },
          "WebsiteURL": {
            "Value": {
                "Fn::GetAtt": [
                    "S3Bucket",
                    "WebsiteURL"
                ]
            },
            "Description": "URL for website hosted on S3"
        },
        "S3BucketSecureURL": {
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        "https://",
                        {
                            "Fn::GetAtt": [
                                "S3Bucket",
                                "DomainName"
                            ]
                        }
                    ]
                ]
            },
            "Description": "Name of S3 bucket to hold website content"
        }
      }
    
    }